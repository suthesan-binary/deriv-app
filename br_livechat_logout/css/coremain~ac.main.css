/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/* @define dc-accordion */
.dc-accordion__wrapper {
  /* postcss-bem-linter: ignore */ }
  .dc-accordion__wrapper > div:last-child {
    border-bottom-right-radius: 4px;
    border-bottom-left-radius: 4px;
    border-bottom-width: 1px; }

.dc-accordion__item {
  border: 1px solid var(--general-section-1);
  border-bottom-width: 0;
  color: var(--text-general);
  font-size: 1.4rem; }
  .dc-accordion__item--first {
    border-top-right-radius: 4px;
    border-top-left-radius: 4px; }
  .dc-accordion__item--open .dc-accordion__item-header {
    border-bottom: 1px solid var(--general-section-1); }
  .dc-accordion__item--open .dc-accordion__item-content {
    display: block; }
  .dc-accordion__item--close .dc-accordion__item-content {
    display: none; }
  .dc-accordion__item-header {
    cursor: pointer;
    line-height: 1.43;
    padding: 8px 16px; }
    .dc-accordion__item-header-icon {
      vertical-align: middle;
      /* postcss-bem-linter: ignore */ }
      .dc-accordion__item-header-icon-wrapper {
        float: right;
        padding-left: 16px; }
      .dc-accordion__item-header-icon path,
      .dc-accordion__item-header-icon rect {
        fill: var(--text-general); }
  .dc-accordion__item-content {
    padding: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-app-card__wrapper {
  display: flex;
  flex-direction: column;
  position: relative;
  align-items: flex-start; }
  .dc-app-card__wrapper--virtual {
    width: 28rem;
    height: 21.4rem;
    background: var(--app-card-virtual);
    border-radius: 0.8rem;
    padding: 0.8rem 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card__wrapper--virtual {
        width: 27.2rem;
        height: 17.6rem;
        padding: 0.8rem 1.2rem; } }
    .dc-app-card__wrapper--virtual-swap-free {
      background: var(--app-card-virtual-swap-free); }
  .dc-app-card__wrapper--real {
    width: 28rem;
    height: 18.2rem;
    background: var(--general-main-1);
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.05), 0px 16px 20px rgba(0, 0, 0, 0.05);
    border-radius: 1.6rem;
    padding: 1.6rem; }
    .dc-app-card__wrapper--real-background {
      position: absolute;
      top: 0;
      left: 0;
      height: 6rem;
      width: 100%;
      border-radius: 1.6rem 1.6rem 0 0; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card__wrapper--real {
        width: 27.2rem;
        height: 14.4rem;
        padding: 1.2rem; } }
  .dc-app-card__wrapper--mini {
    height: 12.8rem;
    width: 21.6rem;
    padding: 1.6rem; }
  .dc-app-card__wrapper--micro {
    height: 9.6rem;
    width: 16.2rem;
    padding: 1.2rem; }

.dc-app-card__badge {
  height: 1.6rem;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: 0.8rem;
  padding: 0.2rem 0.8rem;
  border-radius: 1.2rem; }

.dc-app-card-header__wrapper {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center; }

.dc-app-card-header__container {
  display: flex;
  flex-direction: row; }

.dc-app-card-header__badge--demo {
  background: var(--badge-white);
  cursor: text; }

.dc-app-card-header__badge--swap-free {
  background: var(--badge-green);
  cursor: text; }

.dc-app-card-header__badge--add-real {
  height: 2.4rem;
  background: var(--badge-blue);
  margin-right: unset;
  cursor: pointer; }
  .dc-app-card-header__badge--add-real-icon {
    height: 1.2rem;
    width: 1.2rem;
    border: 1px solid var(--general-main-1);
    border-radius: 0.6rem; }
  .dc-app-card-header__badge--add-real-text {
    margin-left: 0.4rem; }

.dc-app-card-body__wrapper {
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  align-items: flex-start;
  z-index: 5; }
  .dc-app-card-body__wrapper--no-hover {
    flex-grow: 1;
    justify-content: space-between; }
  .dc-app-card-body__wrapper--virtual-default {
    margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card-body__wrapper--virtual-default {
        margin-top: 0.8rem; } }
  .dc-app-card-body__wrapper--virtual-mini {
    margin-top: 0; }
  .dc-app-card-body__wrapper--virtual-micro {
    flex-grow: unset;
    justify-content: unset; }
  .dc-app-card-body__wrapper--real-micro {
    flex-grow: unset;
    justify-content: unset; }

.dc-app-card-body__app-info-wrapper {
  display: flex;
  align-items: center; }

.dc-app-card-body__app-info-icon--default {
  height: 48px;
  width: 48px; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-app-card-body__app-info-icon--default {
      height: 32px;
      width: 32px; } }

.dc-app-card-body__app-info-icon--mini {
  height: 24px;
  width: 24px; }

.dc-app-card-body__app-info-icon--micro {
  height: 18px;
  width: 18px; }

.dc-app-card-body__app-info-name--default {
  margin-left: 0.8rem; }

.dc-app-card-body__app-info-name--mini {
  margin-left: 0.6rem; }

.dc-app-card-body__app-info-name--micro {
  margin-left: 0.4rem; }

.dc-app-card-body__balance-info-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%; }

.dc-app-card-body__balance-info-content {
  display: flex;
  flex-direction: column;
  justify-content: center; }
  .dc-app-card-body__balance-info-content--default {
    margin-top: 1.6rem; }
    @media (min-width: 320px) and (max-width: 767px) {
      .dc-app-card-body__balance-info-content--default {
        margin-top: 0.8rem; } }
  .dc-app-card-body__balance-info-content--mini {
    margin-top: 0.8rem; }
  .dc-app-card-body__balance-info-content--micro {
    margin-top: 0.4rem; }

.dc-app-card-body__badge--swap-free {
  background: var(--badge-violet);
  cursor: text;
  margin-right: unset;
  position: absolute;
  right: 1rem;
  top: 1rem; }

.dc-app-card-footer__wrapper {
  width: calc(100% - 3.2rem);
  height: 3.2rem;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  position: absolute;
  bottom: 1.6rem; }
  .dc-app-card-footer__wrapper--default {
    bottom: 1.8rem; }
  .dc-app-card-footer__wrapper--mini {
    bottom: 1.2rem; }
  @media (min-width: 320px) and (max-width: 767px) {
    .dc-app-card-footer__wrapper {
      height: unset;
      bottom: 1.2rem; } }

.dc-app-card-footer__info {
  display: flex;
  flex-direction: column;
  justify-content: center; }

.dc-app-card-actions__wrapper {
  height: 3.2rem;
  width: calc(100% - 2.4rem);
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  position: absolute;
  bottom: 1.2rem; }

.dc-app-card-actions__content-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s;
  cursor: pointer; }
  .dc-app-card-actions__content-wrapper:hover {
    transform: scale(1.5); }

.dc-app-card-actions__icon {
  height: 1.6rem;
  width: 1.6rem; }
  .dc-app-card-actions__icon--hover {
    padding: 0.2rem;
    border-radius: 0.8rem; }
    .dc-app-card-actions__icon--hover-virtual {
      border: 1px solid var(--general-main-1); }
    .dc-app-card-actions__icon--hover-real {
      border: 1px solid var(--border-hover-1); }
  .dc-app-card-actions__icon--play {
    height: 3.2rem;
    width: 3.2rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 1.6rem;
    background: var(--brand-red-coral);
    transition: transform 0.2s;
    cursor: pointer; }
    @media (min-width: 1024px) {
      .dc-app-card-actions__icon--play:hover {
        transform: scale(1.3); } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-autocomplete {
  width: 100%;
  position: relative; }
  .dc-autocomplete__trailing-icon {
    position: absolute;
    right: 0;
    pointer-events: none;
    cursor: text;
    transition: transform 0.2s ease;
    transform: rotate(0deg);
    transform-origin: 50% 45%; }
    .dc-autocomplete__trailing-icon--opened {
      transform: rotate(-180deg); }
    .dc-autocomplete__trailing-icon--disabled {
      --fill-color1: var(--text-disabled) !important; }
    .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--text-less-prominent); }
  .dc-autocomplete .dc-input {
    margin-bottom: 0; }
    .dc-autocomplete .dc-input--error .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--text-loss-danger); }
  .dc-autocomplete .dc-input__field {
    white-space: nowrap;
    text-overflow: ellipsis;
    padding-right: 2.4rem; }
  .dc-autocomplete .dc-dropdown-list {
    box-shadow: 0 8px 16px 0 var(--shadow-menu);
    background: var(--general-main-2); }
  .dc-autocomplete:focus, .dc-autocomplete[focus-within], .dc-autocomplete:active {
    outline: 0; }
  .dc-autocomplete:focus, .dc-autocomplete:focus-within, .dc-autocomplete:active {
    outline: 0; }
    .dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete[focus-within] .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--brand-secondary); }
    .dc-autocomplete:focus .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:focus-within .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill, .dc-autocomplete:active .dc-input:not(.dc-input--error) .dc-autocomplete__trailing-icon .color1-fill {
      fill: var(--brand-secondary); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-btn {
  vertical-align: middle;
  align-items: center;
  justify-content: center;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6rem;
  display: inline-flex;
  border: 0;
  height: 3.2rem;
  border-radius: 4px;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  text-decoration: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-touch-callout: none;
  -webkit-tap-highlight-color: transparent;
  /*
     * Text will be transformed to sentence case in JS
     * text-transform is declared in .dc-btn instead of .dc-btn__text
     * to ensure consistency (even for children) as per styleguide
     */
  text-transform: none !important;
  /* TODO: confirm this button with designer are we still using this? */
  /* TODO: confirm this button with designer are we still using this? */
  /* postcss-bem-linter: ignore */ }
  .dc-btn__toggle {
    height: auto;
    padding: 0.8rem 2.5rem; }
  .dc-btn__text, .dc-btn__icon {
    display: flex;
    pointer-events: none; }
  .dc-btn__icon {
    font-size: 1.4rem;
    color: var(--text-general);
    font-weight: 700;
    text-transform: unset;
    text-align: center;
    line-height: 1.5;
    color: var(--text-general);
    padding-right: 0.8rem;
    pointer-events: none; }
    .dc-btn__icon--circle {
      padding-right: 0; }
  .dc-btn:not([disabled]):hover {
    text-decoration: none; }
  .dc-btn__rounded {
    border-radius: 24px; }
  .dc-btn--plus {
    width: 2.4rem;
    height: 2.4rem !important;
    border: 1px solid var(--border-hover) !important;
    padding: 0 !important;
    background: inherit;
    background-repeat: no-repeat;
    background-position: center; }
  .dc-btn--circle {
    height: 3.2rem;
    width: 3.2rem !important;
    border-radius: 50%; }
  .dc-btn--primary {
    background: var(--button-primary-default);
    color: var(--text-colored-background); }
    .dc-btn--primary:hover:not([disabled]) {
      background: var(--button-primary-hover); }
    .dc-btn--primary:active:not([disabled]) {
      background: var(--button-primary-default); }
    .dc-btn--primary:disabled, .dc-btn--primary[disabled] {
      opacity: 0.32;
      cursor: not-allowed !important; }
    .dc-btn--primary .dc-btn__text,
    .dc-btn--primary .dc-btn__icon {
      color: var(--text-colored-background); }
    .dc-btn--primary__light {
      background: var(--button-primary-light-default); }
      .dc-btn--primary__light:hover:not([disabled]) {
        background: var(--button-primary-light-hover); }
      .dc-btn--primary__light:active:not([disabled]) {
        background: var(--button-primary-light-default); }
      .dc-btn--primary__light:disabled, .dc-btn--primary__light[disabled] {
        opacity: 0.32;
        cursor: not-allowed !important; }
      .dc-btn--primary__light .dc-btn__text,
      .dc-btn--primary__light .dc-btn__icon {
        color: var(--brand-red-coral); }
  .dc-btn--secondary {
    background: transparent;
    border: 1px solid var(--button-secondary-default); }
    .dc-btn--secondary:hover:not([disabled]) {
      background: var(--button-secondary-hover); }
    .dc-btn--secondary:active:not([disabled]) {
      border: 1px solid var(--button-secondary-default); }
    .dc-btn--secondary:disabled, .dc-btn--secondary[disabled] {
      opacity: 0.32;
      cursor: not-allowed !important; }
    .dc-btn--secondary .dc-btn__text,
    .dc-btn--secondary .dc-btn__icon {
      color: var(--text-prominent); }
  .dc-btn--tertiary {
    background: var(--button-tertiary-default); }
    .dc-btn--tertiary:hover:not([disabled]) {
      background: var(--button-tertiary-hover); }
    .dc-btn--tertiary:active:not([disabled]) {
      background: var(--button-tertiary-default); }
    .dc-btn--tertiary .dc-btn__text,
    .dc-btn--tertiary .dc-btn__icon {
      color: var(--brand-red-coral); }
    .dc-btn--tertiary:disabled, .dc-btn--tertiary[disabled] {
      opacity: 0.32;
      cursor: not-allowed !important; }
  .dc-btn--alternate {
    background: var(--button-tertiary-default);
    border: 2px solid var(--button-primary-default); }
    .dc-btn--alternate:hover:not([disabled]) {
      background: var(--button-primary-default); }
      .dc-btn--alternate:hover:not([disabled]) .dc-btn__text {
        color: var(--text-colored-background); }
    .dc-btn--alternate .dc-btn__text,
    .dc-btn--alternate .dc-btn__icon {
      color: var(--brand-red-coral); }
  .dc-btn--green {
    background: var(--status-success); }
    .dc-btn--green:hover:not([disabled]) {
      background: var(--transparent-success); }
    .dc-btn--green:active:not([disabled]) {
      background: var(--status-success); }
    .dc-btn--green .dc-btn__text,
    .dc-btn--green .dc-btn__icon {
      color: var(--text-colored-background); }
  .dc-btn__small {
    height: 2.4rem;
    min-width: 4.8rem;
    border-width: 1px; }
    .dc-btn__small .dc-btn__text {
      font-size: 1.2rem; }
  .dc-btn__medium {
    height: 3.2rem;
    min-width: 5.6rem;
    border-width: 1px; }
    .dc-btn__medium .dc-btn__text {
      font-size: 1.4rem; }
  .dc-btn__large {
    height: 4rem;
    min-width: 6.4rem;
    border-width: 2px; }
    .dc-btn__large .dc-btn__text {
      font-size: 1.4rem; }
  .dc-btn__effect:focus:not(:active):after {
    content: '';
    position: absolute;
    top: -0.1em;
    left: -0.1em;
    bottom: -0.1em;
    right: -0.1em;
    border-radius: inherit;
    border: 0 solid var(--brand-secondary);
    opacity: 0.4;
    -webkit-animation: buttonEffect 0.4s;
            animation: buttonEffect 0.4s;
    -webkit-animation-fill-mode: forwards;
            animation-fill-mode: forwards;
    display: block; }
  .dc-btn__group {
    white-space: nowrap; }
    .dc-btn__group .dc-btn + .dc-btn {
      margin-left: 8px; }
  .dc-btn .initial-loader--btn {
    background-color: unset;
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .dc-btn .initial-loader--btn .initial-loader__barspinner--rect {
      background-color: var(--text-colored-background); }
    .dc-btn .initial-loader--btn .barspinner {
      margin: 0.6rem 4px 0 -4px;
      /* postcss-bem-linter: ignore */ }
      .dc-btn .initial-loader--btn .barspinner__rect {
        height: 35%; }

@-webkit-keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-button-menu */
.dc-button-menu {
  display: flex;
  justify-content: center;
  width: 100%;
  position: relative; }
  .dc-button-menu__button:first-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px; }
  .dc-button-menu__button:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px; }
  .dc-button-menu__button {
    margin: 0;
    border: none;
    border-radius: 0px;
    width: 50%;
    background-color: var(--state-normal);
    /* postcss-bem-linter: ignore */
    /* postcss-bem-linter: ignore */ }
    .dc-button-menu__button .dc-btn__text {
      display: contents; }
    .dc-button-menu__button:hover:not(.dc-button-menu__button--active) {
      background-color: var(--state-hover) !important; }
    .dc-button-menu__button span {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 400;
      text-transform: unset;
      text-align: left;
      line-height: 1.5;
      color: var(--text-general); }
    .dc-button-menu__button--active {
      cursor: auto;
      cursor: initial;
      background-color: var(--state-active) !important; }
      .dc-button-menu__button--active span {
        font-size: 1.4rem;
        color: var(--text-colored-background);
        font-weight: 700;
        text-transform: unset;
        text-align: left;
        line-height: 1.5;
        color: var(--text-prominent); }
  .dc-button-menu__counter {
    margin-left: 0.4rem; }
  .dc-button-menu__wrapper {
    position: relative;
    border-radius: 4px;
    width: 100%;
    background-color: var(--state-normal);
    display: flex; }
    .dc-button-menu__wrapper .dc-button-menu__button, .dc-button-menu__wrapper .dc-button-menu__button--active {
      background-color: rgba(0, 0, 0, 0) !important;
      z-index: 1;
      padding: 0.8rem 0.6rem;
      white-space: normal; }
      .dc-button-menu__wrapper .dc-button-menu__button .dc-btn__text, .dc-button-menu__wrapper .dc-button-menu__button--active .dc-btn__text {
        line-height: normal; }
    .dc-button-menu__wrapper .dc-button-menu__button:nth-last-child(2) {
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px; }
  .dc-button-menu--highlight {
    display: block;
    position: absolute;
    content: '';
    height: 100%;
    top: 0;
    left: 0;
    z-index: 0;
    transition: transform 0.25s ease;
    pointer-events: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
/** @define dc-calendar */
.dc-calendar {
  outline: 0;
  border-radius: 5px;
  z-index: 999;
  box-sizing: border-box;
  font-size: 1rem;
  background: var(--general-main-2);
  box-shadow: 0 2px 8px 0 var(--shadow-menu); }
  .dc-calendar__header, .dc-calendar__footer {
    position: relative;
    display: flex;
    align-items: center;
    height: 5rem;
    border-radius: 5px;
    padding: 1.6rem;
    box-sizing: border-box; }
  .dc-calendar__header {
    justify-content: center; }
  .dc-calendar__footer :last-child:not(:only-child),
  .dc-calendar__footer .dc-calendar__btn--today {
    margin-left: auto; }
  .dc-calendar__body {
    border-top: 0.1rem solid var(--general-section-2);
    border-bottom: 0.1rem solid var(--general-section-2); }
    .dc-calendar__body--date, .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
      display: grid;
      grid-gap: 1.2rem;
      padding: 0.8rem 2rem; }
      .dc-calendar__body--date .dc-calendar__cell, .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 5px; }
    .dc-calendar__body--date {
      grid-template-columns: repeat(7, 2.4rem);
      grid-auto-rows: 2.4rem; }
      .dc-calendar__body--date .dc-calendar__cell {
        width: 100%;
        height: 100%; }
    .dc-calendar__body--month, .dc-calendar__body--year, .dc-calendar__body--decade {
      grid-template-columns: repeat(3, minmax(7.2rem, 1fr));
      grid-auto-rows: minmax(4.2rem, auto); }
      .dc-calendar__body--month .dc-calendar__cell, .dc-calendar__body--year .dc-calendar__cell, .dc-calendar__body--decade .dc-calendar__cell {
        width: 5.6rem;
        height: 3.2rem; }
        .dc-calendar__body--month .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--year .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled), .dc-calendar__body--decade .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--disabled) {
          color: var(--text-general); }
    .dc-calendar__body--decade .dc-calendar__cell {
      width: 100%; }
  .dc-calendar__icon {
    cursor: pointer;
    right: 5%; }
    .dc-calendar__icon--today:hover {
      cursor: pointer; }
  .dc-calendar__btn {
    text-align: center;
    padding: 0 0.2rem;
    font-weight: bold;
    cursor: pointer;
    border: none;
    outline: none;
    background: none; }
    .dc-calendar__btn--disabled {
      cursor: default;
      transition: none; }
      .dc-calendar__btn--disabled .dc-calendar__icon {
        cursor: default; }
    .dc-calendar__btn--is-hidden {
      display: none; }
    .dc-calendar__btn--select {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      color: var(--text-prominent); }
    .dc-calendar__btn--prev-year, .dc-calendar__btn--next-year, .dc-calendar__btn--prev-month, .dc-calendar__btn--next-month {
      position: absolute;
      padding: 0 0.5em;
      height: 1.4em; }
    .dc-calendar__btn--prev-year {
      left: 7%; }
    .dc-calendar__btn--next-year {
      right: 7%; }
    .dc-calendar__btn--prev-month {
      left: 14%; }
    .dc-calendar__btn--next-month {
      right: 14%; }
  .dc-calendar__cell {
    font-size: 1.2rem;
    color: var(--text-general);
    font-weight: 400;
    text-transform: none;
    text-align: left;
    line-height: 1.25;
    align-self: center;
    justify-self: center;
    position: relative;
    cursor: pointer;
    color: var(--text-general);
    box-sizing: border-box; }
    .dc-calendar__cell:hover:not(.dc-calendar__cell--disabled) {
      color: var(--text-general);
      background: var(--state-hover); }
    .dc-calendar__cell:nth-child(7n):before {
      padding: 0;
      border-radius: 4px; }
    .dc-calendar__cell:nth-child(7n + 1):before {
      left: 0;
      border-radius: 4px; }
    .dc-calendar__cell:nth-child(7n + 1):after {
      content: none; }
    .dc-calendar__cell--bold {
      font-size: 1.4rem;
      color: var(--text-general);
      font-weight: 700;
      text-transform: none;
      text-align: left;
      line-height: 1.5;
      color: var(--text-prominent); }
    .dc-calendar__cell--disabled:hover {
      cursor: default; }
    .dc-calendar__cell--disabled:not(.dc-calendar__cell--today):not(.dc-calendar__cell--between-hover):not(.dc-calendar__cell--between), .dc-calendar__cell--other:not(.dc-calendar__cell--today):not(.dc-calendar__cell--active):not(.dc-calendar__cell--between-hover):not(.dc-calendar__cell--between) {
      color: var(--text-disabled);
      transition: none; }
    .dc-calendar__cell--is-hidden {
      display: none; }
    .dc-calendar__cell--today {
      font-weight: bold;
      color: var(--text-prominent);
      border: 1px solid var(--state-active); }
      .dc-calendar__cell--today-duration {
        background: var(--state-active); }
    .dc-calendar__cell--active {
      font-weight: bold;
      color: var(--text-prominent);
      background: var(--state-active); }
      .dc-calendar__cell--active:hover {
        background: var(--state-active); }
      .dc-calendar__cell--active-duration {
        background: var(--state-active); }
        .dc-calendar__cell--active-duration:after {
          position: absolute;
          content: '';
          width: 100%;
          top: 0;
          right: 50%;
          z-index: -1;
          height: 100%;
          padding-left: 1rem;
          background: var(--state-active); }
    .dc-calendar__cell--between {
      font-weight: bold;
      color: var(--text-prominent);
      background: var(--state-active); }
      .dc-calendar__cell--between-hover:before {
        position: absolute;
        content: '';
        width: 100%;
        z-index: -2;
        height: 100%;
        padding-left: 3.2rem;
        background: var(--state-hover); }
      .dc-calendar__cell--between:hover {
        background: var(--state-active); }
      .dc-calendar__cell--between:before {
        position: absolute;
        content: '';
        width: 100%;
        z-index: -1;
        height: 100%;
        padding-left: 3.2rem;
        background: var(--state-active); }
    .dc-calendar__cell-tooltip {
      position: absolute;
      display: inline-grid;
      cursor: default;
      height: 0;
      top: 0;
      left: 0;
      justify-content: center;
      width: 100%; }
      .dc-calendar__cell-tooltip-icon {
        margin-top: 0.1rem;
        display: inherit; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.dc-card {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  border: 1px solid var(--border-normal);
  padding: 1.6rem;
  border-radius: 4px; }
  .dc-card__wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: auto;
    margin: 1.6rem; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/* Wallet gradient background */
/* App Cards gradient background */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
 * Define Breakpoints here.
 */
.terms-of-use {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  margin: 0 8rem 0.8rem; }

.terms-of-use__checkbox {
  margin-top: 1.6rem; }

.terms-of-use__hr {
  height: 2px;
  margin: 1.6rem 0 0;
  width: 100%;
  border-top: 1px solid var(--general-section-1); }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use__hr {
    border-top-width: 2px;
    border-color: var(--border-disabled);
    width: 100%; } }

.terms-of-use h4 {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 700;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  margin: 1rem 0;
  text-transform: none;
  color: var(--text-general); }

.terms-of-use p {
  font-size: 1.4rem;
  color: var(--text-general);
  font-weight: 400;
  text-transform: none;
  text-align: left;
  line-height: 1.5;
  text-transform: none;
  color: var(--text-general); }

.terms-of-use input {
  display: none; }

@media (min-width: 320px) and (max-width: 767px) {
  .terms-of-use {
    overflow-x: hidden;
    margin: 0;
    padding: 0 2.4rem 10rem;
    overflow-y: auto; }
  .terms-of-use .dc-checkbox__box {
    width: 2.4rem;
    height: 2.4rem; }
  .terms-of-use .dc-checkbox__box .dc-icon {
    width: 2.4rem;
    height: 2.4rem; } }

